<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlStreamStore</name>
    </assembly>
    <members>
        <member name="T:SqlStreamStore.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Logging.ILog.Log(SqlStreamStore.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:SqlStreamStore.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:SqlStreamStore.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:SqlStreamStore.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:SqlStreamStore.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:SqlStreamStore.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:SqlStreamStore.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:SqlStreamStore.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.SetCurrentLogProvider(SqlStreamStore.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:SqlStreamStore.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlStreamStore.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:SqlStreamStore.Logging.LogProvider.SetCurrentLogProvider(SqlStreamStore.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:SqlStreamStore.Logging.ILog"/></returns>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:SqlStreamStore.Logging.ILog"/></returns>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:SqlStreamStore.Logging.ILog"/></returns>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:SqlStreamStore.Logging.ILog"/></returns>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:SqlStreamStore.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:SqlStreamStore.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlStreamStore.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:SqlStreamStore.IAllStreamSubscription">
            <summary>
                Represents a subscript to all streams.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:SqlStreamStore.IAllStreamSubscription.Name">
            <summary>
            Gets the name of the subscription. Useful for debugging and diagnostics.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IAllStreamSubscription.LastPosition">
            <summary>
            The last position processed by the subscription. Will be -1 if nothing has yet been processed.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IAllStreamSubscription.Started">
            <summary>
            A task that represents the subscription has been started. Is is usually not necessary to await this
            except perhaps in tests when you subscribe to end of all stream.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IAllStreamSubscription.MaxCountPerRead">
            <summary>
            Gets or sets the max count per read the subscription uses when retrieving messages. Larger values
            may result in larger payloads and memory usage whereas smaller values will result in more round-trips
            to the store. The correct value requires benchmarking of your application.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent">
            <summary>
            An async-compatible auto-reset event.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent._queue">
            <summary>
            The queue of TCSs that other tasks are awaiting.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent._set">
            <summary>
            The current state of the event.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.#ctor(System.Boolean,SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue{System.Object})">
            <summary>
            Creates an async-compatible auto-reset event.
            </summary>
            <param name="set">Whether the auto-reset event is initially set or unset.</param>
            <param name="queue">The wait queue used to manage waiters. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible auto-reset event.
            </summary>
            <param name="set">Whether the auto-reset event is initially set or unset.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.#ctor">
            <summary>
            Creates an async-compatible auto-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous auto-reset event.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.Wait">
            <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncAutoResetEvent.Set">
            <summary>
            Sets the event, atomically completing a task returned by <see cref="o:WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1">
            <summary>
            A collection of cancelable <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> instances. Implementations must assume the caller is holding a lock.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.Enqueue">
            <summary>
            Creates a new entry and queues it to this wait queue. The returned task must support both synchronous and asynchronous waits.
            </summary>
            <returns>The queued task.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.Dequeue(`0)">
            <summary>
            Removes a single entry in the wait queue and completes it. This method may only be called if <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.IsEmpty"/> is <c>false</c>. The task continuations for the completed task must be executed asynchronously.
            </summary>
            <param name="result">The result used to complete the wait queue entry. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.DequeueAll(`0)">
            <summary>
            Removes all entries in the wait queue and completes them. The task continuations for the completed tasks must be executed asynchronously.
            </summary>
            <param name="result">The result used to complete the wait queue entries. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.TryCancel(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove an entry from the wait queue and cancels it. The task continuations for the completed task must be executed asynchronously.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="cancellationToken">The cancellation token to use to cancel the task.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue`1.CancelAll(System.Threading.CancellationToken)">
            <summary>
            Removes all entries from the wait queue and cancels them. The task continuations for the completed tasks must be executed asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token to use to cancel the tasks.</param>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncWaitQueueExtensions">
            <summary>
            Provides extension methods for wait queues.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.AsyncWaitQueueExtensions.Enqueue``1(SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IAsyncWaitQueue{``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.
            </summary>
            <param name="this">The wait queue.</param>
            <param name="mutex">A synchronization object taken while cancelling the entry.</param>
            <param name="token">The token used to cancel the wait.</param>
            <returns>The queued task.</returns>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.DefaultAsyncWaitQueue`1">
            <summary>
            The default wait queue implementation, which uses a double-ended queue.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IdManager`1">
            <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems. This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TTag">The type for which ids are generated.</typeparam>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IdManager`1._lastId">
            <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Coordination.IdManager`1.GetId(System.Int32@)">
            <summary>
            Returns the id, allocating it if necessary.
            </summary>
            <param name="id">A reference to the field containing the id.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.ExceptionHelpers.PrepareForRethrow(System.Exception)">
            <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
            <returns>The <see cref="T:System.Exception"/> that was passed into this method.</returns>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions">
            <summary>
            Provides synchronous extension methods for tasks.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>The result of the task.</returns>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed.</exception>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,System.Func{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/> but using the result value from <paramref name="resultFunc"/> if the task completed successfully.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="resultFunc">A delegate that returns the result with which to complete the task completion source, if the task completed successfully. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskCompletionSourceExtensions.CreateAsyncTaskSource``1">
            <summary>
            Creates a new TCS for use with async code, and which forces its continuations to execute asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result of the TCS.</typeparam>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants">
            <summary>
            Provides completed task constants.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.BooleanTrue">
            <summary>
            A task that has been completed with the value <c>true</c>.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.BooleanFalse">
            <summary>
            A task that has been completed with the value <c>false</c>.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.Int32Zero">
            <summary>
            A task that has been completed with the value <c>0</c>.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.Int32NegativeOne">
            <summary>
            A task that has been completed with the value <c>-1</c>.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.Completed">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> that has been completed.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants`1">
            <summary>
            Provides completed task constants.
            </summary>
            <typeparam name="T">The type of the task result.</typeparam>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants`1.Default">
            <summary>
            A task that has been completed with the default value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.AsyncEx.Tasks.TaskConstants`1.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._buffer">
            <summary>
            The circular _buffer that holds the view.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset">
            <summary>
            The offset into <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection. May not be <c>null</c>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.CopyToArray(System.Array,System.Int32)">
            <summary>
            Copies the deque elemens into an array. The resulting array always has all the deque elements contiguously.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The optional index in the destination array at which to begin writing.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._buffer"/> than the end).
            </summary>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/> after it was incremented.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/>. May not be negative or greater than <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1._offset"/> before it was decremented.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert. The sum of <c>collection.Count</c> and <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count"/> must be less than or equal to <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count"/>.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Imports.AsyncEx.Nito.Collections.Deque.Deque`1.ToArray">
            <summary>
            Creates and returns a new array containing the elements in this deque.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.GetUtcNow">
            <summary>
                Represents an operation to get the UTC data time. Mainly used in tests to control the temporal concerns.
            </summary>
            <returns>
                A <see cref="T:System.DateTime"/> representing the current UTC date and time.
            </returns>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.InterlockedBoolean">
            <summary>
            Interlocked support for boolean values
            </summary>
        </member>
        <member name="P:SqlStreamStore.Infrastructure.InterlockedBoolean.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.InterlockedBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:InterlockedBoolean"/>
            </summary>
            <param name="initialValue">initial value</param>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.InterlockedBoolean.Set(System.Boolean)">
            <summary>
            Sets a new value
            </summary>
            <param name="newValue">new value</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.InterlockedBoolean.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Compares the current value and the comparand for equality and, if they are equal, 
            replaces the current value with the new value in an atomic/thread-safe operation.
            </summary>
            <param name="newValue">new value</param>
            <param name="comparand">value to compare the current value with</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.ReadonlyStreamStoreBase">
            <summary>
                Represents a base implementation of a readonly stream store.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.StreamStoreBase">
            <summary>
                Represnets a base implementation of a stream store. It's primary purpose is to handle 
                common needs across all derived implementations such as guard clauses and logging.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.#ctor(System.TimeSpan,System.Int32,SqlStreamStore.Infrastructure.GetUtcNow,System.String)">
            <summary>
                Initialized an new instance of a <see cref="T:SqlStreamStore.Infrastructure.StreamStoreBase"/>
            </summary>
            <param name="metadataMaxAgeCacheExpiry"></param>
            <param name="metadataMaxAgeCacheMaxSize"></param>
            <param name="getUtcNow"></param>
            <param name="logName"></param>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.AppendToStream(SqlStreamStore.Streams.StreamId,System.Int32,SqlStreamStore.Streams.NewStreamMessage[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.DeleteStream(SqlStreamStore.Streams.StreamId,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.DeleteMessage(SqlStreamStore.Streams.StreamId,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.SetStreamMetadata(SqlStreamStore.Streams.StreamId,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.GetStreamMessageCount(System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the count of messages in a stream.
            </summary>
            <param name="streamId">The stream id.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>The number of messages in a stream.</returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.StreamStoreBase.PurgeExpiredMessage(SqlStreamStore.Streams.StreamMessage)">
            <summary>
                Queues a task to purge expired message.
            </summary>
            <param name="streamMessage"></param>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.TaskExtensions">
            <summary>
                Represents extensions on Tasks.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskExtensions.NotOnCapturedContext(System.Threading.Tasks.Task)">
            <summary>
            ConfigureAwait(false)
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskExtensions.NotOnCapturedContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            ConfigureAwait(false)
            </summary>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.TaskQueue">
            <summary>
                Represents a queue of tasks where a task is processed one at a time. When disposed
                the outstanding tasks are cancelled.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskQueue.Enqueue(System.Action)">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="action">The operations to invoke.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskQueue.Enqueue``1(System.Func{``0})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operations to invoke.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskQueue.Enqueue(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operation to invoke that is co-operatively cancelable.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.TaskQueue.Enqueue``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operation to invoke that is co-operatively cancelable.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="T:SqlStreamStore.Infrastructure.Unit">
            <summary>
            Represents a type with a single value. This type is often used to denote the successful completion of a void-returning method (C#) or a Sub procedure (Visual Basic).
            
            </summary>
        </member>
        <member name="P:SqlStreamStore.Infrastructure.Unit.Default">
            <summary>
            Gets the single unit value.
            
            </summary>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.op_Equality(SqlStreamStore.Infrastructure.Unit,SqlStreamStore.Infrastructure.Unit)">
            <summary>
            Determines whether the two specified Unit values are equal. Because Unit has a single value, this always returns true.
            
            </summary>
            <param name="first">The first Unit value to compare.</param><param name="second">The second Unit value to compare.</param>
            <returns>
            Because Unit has a single value, this always returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.op_Inequality(SqlStreamStore.Infrastructure.Unit,SqlStreamStore.Infrastructure.Unit)">
            <summary>
            Determines whether the two specified Unit values are not equal. Because Unit has a single value, this always returns false.
            
            </summary>
            <param name="first">The first Unit value to compare.</param><param name="second">The second Unit value to compare.</param>
            <returns>
            Because Unit has a single value, this always returns false.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.Equals(SqlStreamStore.Infrastructure.Unit)">
            <summary>
            Determines whether the specified Unit values is equal to the current Unit. Because Unit has a single value, this always returns true.
            
            </summary>
            <param name="other">An object to compare to the current Unit value.</param>
            <returns>
            Because Unit has a single value, this always returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current Unit.
            
            </summary>
            <param name="obj">The System.Object to compare with the current Unit.</param>
            <returns>
            true if the specified System.Object is a Unit value; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.GetHashCode">
            <summary>
            Returns the hash code for the current Unit value.
            
            </summary>
            
            <returns>
            A hash code for the current Unit value.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Infrastructure.Unit.ToString">
            <summary>
            Returns a string representation of the current Unit value.
            
            </summary>
            
            <returns>
            String representation of the current Unit value.
            </returns>
        </member>
        <member name="T:SqlStreamStore.InMemoryStreamStore">
            <summary>
                Represents an in-memory implementation of a stream store. Use for testing or high/speed + volatile scenarios.
            </summary>
        </member>
        <member name="T:SqlStreamStore.IReadonlyStreamStore">
            <summary>
                Represents a readonly stream store.
            </summary>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.ReadAllForwards(System.Int64,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Reads messages from all streams forwards.
            </summary>
            <param name="fromPositionInclusive">
                The position to start reading from. Use <see cref="F:SqlStreamStore.Streams.Position.Start"/> to start from the beginning.
                Note: messages that have expired will be filtered out.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadAllPage"/> presenting the result of the read. If all messages read have expired
                then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.ReadAllBackwards(System.Int64,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Reads messages from all streams backwards.
            </summary>
            <param name="fromPositionInclusive">
                The position to start reading from. Use <see cref="F:SqlStreamStore.Streams.Position.End"/> to start from the end.
                Note: messages that have expired will be filtered out.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea). 
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadAllPage"/> presenting the result of the read. If all messages read have expired
                then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.ReadStreamForwards(SqlStreamStore.Streams.StreamId,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Reads messages from a stream forwards.
            </summary>
            <param name="streamId">
                The stream ID to read.
            </param>
            <param name="fromVersionInclusive">
                The version of the stream to start reading from. Use <see cref="F:SqlStreamStore.Streams.StreamVersion.Start"/> to read from 
                the start.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadStreamPage"/> represent the result of the operation. If all the messages read
                have expired then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.ReadStreamBackwards(SqlStreamStore.Streams.StreamId,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Reads messages from a stream backwards.
            </summary>
            <param name="streamId">
                The stream ID to read.
            </param>
            <param name="fromVersionInclusive">
                The version of the stream to start reading from. Use <see cref="F:SqlStreamStore.Streams.StreamVersion.End"/> to read from 
                the end.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadStreamPage"/> represent the result of the operation. If all the messages read
                have expired then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.SubscribeToStream(SqlStreamStore.Streams.StreamId,System.Nullable{System.Int32},SqlStreamStore.Subscriptions.StreamMessageReceived,SqlStreamStore.Subscriptions.SubscriptionDropped,SqlStreamStore.Subscriptions.HasCaughtUp,System.Boolean,System.String)">
            <summary>
                Subsribes to a stream.
            </summary>
            <param name="streamId">
                The stream to subscribe to.
            </param>
            <param name="continueAfterVersion">
                The version a subscription from. If the version is unknown (i.e. first time subscription), use null.
            </param>
            <param name="streamMessageReceived">
                A delegate that is invoked when a message is available. If an exception is thrown, the subscription
                is terminated.
            </param>
            <param name="subscriptionDropped">
                A delegate that is invoked when a the subscription is dropped. This will be invoked once and only once.
            </param>
            <param name="hasCaughtUp">
                A delegate that is invoked with value=true when the subscription has caught up with the stream
                (when the underlying page read has IsEnd=true) and when it falls behind (when the underlying page read
                has IsEnd=false). 
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="name">
                The name of the subscription used for logging. Optional.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.IStreamSubscription"/> that represents the subscription. Dispose to stop the subscription.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.SubscribeToAll(System.Nullable{System.Int64},SqlStreamStore.Subscriptions.AllStreamMessageReceived,SqlStreamStore.Subscriptions.AllSubscriptionDropped,SqlStreamStore.Subscriptions.HasCaughtUp,System.Boolean,System.String)">
            <summary>
                Subsribes to all stream.
            </summary>
            <param name="continueAfterPosition">
                The position to start subscribing after. Use null to include the first message.
            </param>
            <param name="streamMessageReceived">
                A delegate that is invoked when a message is available. If an exception is thrown, the subscription
                is terminated.
            </param>
            <param name="subscriptionDropped">
                A delegate that is invoked when a the subscription is dropped. This will be invoked once and only once.
            </param>
            <param name="hasCaughtUp">
                A delegate that is invoked with value=true when the subscription has catught up with the all stream
                (when the underlying page read has IsEnd=true) and when it falls behind (when the underlying page read
                has IsEnd=false). 
            </param>
            <param name="prefetchJsonData">
                Prefetches the message data as part of the page read. This means a single request to the server
                but a higher payload size.
            </param>
            <param name="name">
                The name of the subscription used for logging. Optional.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.IStreamSubscription"/> that represents the subscription. Dispose to stop the subscription.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.ReadHeadPosition(System.Threading.CancellationToken)">
            <summary>
                Reads the head position (the postion of the very latest message).
            </summary>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                The head positon.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IReadonlyStreamStore.GetStreamMetadata(System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the stream metadata.
            </summary>
            <param name="streamId">
                The stream ID whose metadata is to be read.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                A <see cref="T:SqlStreamStore.Streams.StreamMetadataResult"/> 
            </returns>
        </member>
        <member name="T:SqlStreamStore.IStreamStore">
            <summary>
                Represents a readable and writable stream store.
            </summary>
        </member>
        <member name="M:SqlStreamStore.IStreamStore.AppendToStream(SqlStreamStore.Streams.StreamId,System.Int32,SqlStreamStore.Streams.NewStreamMessage[],System.Threading.CancellationToken)">
            <summary>
                Appends a collection of messages to a stream. 
            </summary>
            <remarks>
                Idempotency and concurrency handling is dependent on the choice of expected version and the messages
                to append.
            
                1. When expectedVersion = ExpectedVersion.NoStream and the stream already exists and the collection of
                   message IDs are not already in the stream, then <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> is
                   throw.
                2. When expectedVersion = ExpectedVersion.Any and the collection of messages IDs don't exist in the
                   stream, then they are appended
                3. When expectedVersion = ExpectedVersion.Any and the collection of messages IDs exist in the stream,
                   then idempotency is applied and nothing happens.
                4. When expectedVersion = ExpectedVersion.Any and of the collection of messages Ids some exist in the 
                   stream and some don't then a <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> will be throwm.
                5. When expectedVersion is specified and the stream current version does not match the 
                   collection of message IDs are are checked against the stream in the correct position then the 
                   operation is considered idempotent. Otherwise a <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> will be
                   throwm.
            </remarks>
            <param name="streamId">
                The Stream Id of the stream to append the messages. Must not start with a '$'.
            </param>
            <param name="expectedVersion">
                The version of the stream that is expected. This is used to control concurrency and idempotency
                concerns. See <see cref="T:SqlStreamStore.Streams.ExpectedVersion"/>.
            </param>
            <param name="messages">
                The collection of messages to append.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:SqlStreamStore.IStreamStore.DeleteStream(SqlStreamStore.Streams.StreamId,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Hard deletes a stream and all of its messages. Deleting a stream will result in a '$stream-deleted'
                message being appended to the '$deleted' stream. See <see cref="T:SqlStreamStore.Streams.Deleted.StreamDeleted"/> for the
                message structure. 
            </summary>
            <param name="streamId">
                The stream Id to delete.
            </param>
            <param name="expectedVersion">
                The stream expected version. See <see cref="T:SqlStreamStore.Streams.ExpectedVersion"/> for const values.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IStreamStore.DeleteMessage(SqlStreamStore.Streams.StreamId,System.Guid,System.Threading.CancellationToken)">
            <summary>
                Hard deletes a message from the stream. Deleting a message will result in a '$message-deleted'
                message being appended to the '$deleted' stream. See <see cref="T:SqlStreamStore.Streams.Deleted.MessageDeleted"/> for the
                message structure. 
            </summary>
            <param name="streamId">
                The stream to delete.
            </param>
            <param name="messageId">
                The message to delete. If the message doesn't exist then nothing happens.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:SqlStreamStore.IStreamStore.SetStreamMetadata(SqlStreamStore.Streams.StreamId,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
                Sets the metadata for a stream.
            </summary>
            <param name="streamId">The stream Id to whose metadata is to be set.</param>
            <param name="expectedStreamMetadataVersion">
                The expected version number of the metadata stream to apply the metadata. Used for concurrency
                handling. Default value is <see cref="F:SqlStreamStore.Streams.ExpectedVersion.Any"/>. If specified and does not match 
                current version then <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> will be thrown.
            </param>
            <param name="maxAge">The max age of the messages in the stream in seconds.</param>
            <param name="maxCount">The max count of messages in the stream.</param>
            <param name="metadataJson">Custom meta data to associate with the stream.</param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:SqlStreamStore.IStreamSubscription">
            <summary>
                Represents a subscription to a stream.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IStreamSubscription.Name">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IStreamSubscription.StreamId">
            <summary>
            Gets the stream id the subsription is associated with.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IStreamSubscription.LastVersion">
            <summary>
            The last stream version processed by the subscription.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IStreamSubscription.Started">
            <summary>
            A task that represents the subscription has been started. Is is usually not necessary to await this
            except perhaps in tests and when you subscribe to end of stream.
            </summary>
        </member>
        <member name="P:SqlStreamStore.IStreamSubscription.MaxCountPerRead">
            <summary>
            Gets or sets the max count per read the subscription uses when retrieving messages. Larger values
            may result in larger payloads and memory usage whereas smaller values will result in more round-trips
            to the store. The correct value requires benchmarking of your application.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Json.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Json.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlStreamStore.Json.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SqlStreamStore.Json.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlStreamStore.Json.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SqlStreamStore.Json.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SqlStreamStore.Json.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Json.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SqlStreamStore.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SqlStreamStore.Json.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SqlStreamStore.Json.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
            </summary>
            <param name="binder">Provides information about the deletion.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            Alwasy returns true.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:SqlStreamStore.Json.JsonObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="T:SqlStreamStore.StreamStoreExtensions">
            <summary>
                A collection of extensions over a StreamStore instance.
            </summary>
        </member>
        <member name="M:SqlStreamStore.StreamStoreExtensions.ReadAllForwards(SqlStreamStore.IReadonlyStreamStore,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads messages from all streams forwards.
            </summary>
            <param name="readonlyStreamStore">
                The stream store instance.
            </param>
            <param name="fromPositionInclusive">
                The position to start reading from. Use <see cref="F:SqlStreamStore.Streams.Position.Start"/> to start from the beginning.
                Note: messages that have expired will be filtered out.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadAllPage"/> presenting the result of the read. If all messages read have expired
                then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.StreamStoreExtensions.ReadAllBackwards(SqlStreamStore.IReadonlyStreamStore,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads messages from all streams backwards.
            </summary>
            <param name="readonlyStreamStore">
                The stream store instance.
            </param>
            <param name="fromPositionInclusive">
                The position to start reading from. Use <see cref="F:SqlStreamStore.Streams.Position.Start"/> to start from the beginning.
                Note: messages that have expired will be filtered out.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadAllPage"/> presenting the result of the read. If all messages read have expired
                then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.StreamStoreExtensions.ReadStreamForwards(SqlStreamStore.IReadonlyStreamStore,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads messages from a stream forwards.
            </summary>
            <param name="readonlyStreamStore">
                The stream store instance.
            </param>
            <param name="streamId">
                The stream ID to read.
            </param>
            <param name="fromVersionInclusive">
                The version of the stream to start reading from. Use <see cref="F:SqlStreamStore.Streams.StreamVersion.Start"/> to read from 
                the start.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadStreamPage"/> represent the result of the operation. If all the messages read
                have expired then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.StreamStoreExtensions.ReadStreamBackwards(SqlStreamStore.IReadonlyStreamStore,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads messages from a stream backwards.
            </summary>
            <param name="readonlyStreamStore">
                The stream store instance.
            </param>
            <param name="streamId">
                The stream ID to read.
            </param>
            <param name="fromVersionInclusive">
                The version of the stream to start reading from. Use <see cref="F:SqlStreamStore.Streams.StreamVersion.End"/> to read from 
                the end.
            </param>
            <param name="maxCount">
                The maximum number of messages to read (int.MaxValue is a bad idea).
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                An <see cref="T:SqlStreamStore.Streams.ReadStreamPage"/> represent the result of the operation. If all the messages read
                have expired then the message collection MAY be empty.
            </returns>
        </member>
        <member name="M:SqlStreamStore.StreamStoreExtensions.AppendToStream(SqlStreamStore.IStreamStore,System.String,System.Int32,SqlStreamStore.Streams.NewStreamMessage,System.Threading.CancellationToken)">
            <summary>
                Appends a collection of messages to a stream. 
            </summary>
            <remarks>
                Idempotency and concurrency handling is dependent on the choice of expected version and the messages
                to append.
            
                1. When expectedVersion = ExpectedVersion.NoStream and the stream already exists and the collection of
                   message IDs are not already in the stream, then <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> is
                   throw.
                2. When expectedVersion = ExpectedVersion.Any and the collection of messages IDs don't exist in the
                   stream, then they are appended
                3. When expectedVersion = ExpectedVersion.Any and the collection of messages IDs exist in the stream,
                   then idempotency is applied and nothing happens.
                4. When expectedVersion = ExpectedVersion.Any and of the collection of messages Ids some exist in the 
                   stream and some don't then a <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> will be throwm.
                5. When expectedVersion is specified and the stream current version does not match the 
                   collection of message IDs are are checked against the stream in the correct position then the 
                   operation is considered idempotent. Otherwise a <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/> will be
                   throwm.
            </remarks>
            <param name="store">
                The stream store instance.
            </param>
            <param name="streamId">
                The Stream Id of the stream to append the messages. Must not start with a '$'.
            </param>
            <param name="expectedVersion">
                The version of the stream that is expected. This is used to control concurrency and idempotency
                concerns. See <see cref="T:SqlStreamStore.Streams.ExpectedVersion"/>.
            </param>
            <param name="message">
                The messages to append.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.AppendResult">
            <summary>
                Represents the result of an append to stream operation.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.AppendResult.CurrentVersion">
            <summary>
                The current version the stream that was affected by the append operation is at.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.AppendResult.CurrentPosition">
            <summary>
                The current position the stream that was affected by the append operation is at.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.AppendResult.#ctor(System.Int32,System.Int64)">
            <summary>
                Initializes a new instance of <see cref="T:SqlStreamStore.Streams.AppendResult"/>
            </summary>
            <param name="currentVersion">The current version the stream that was affected by the append operation is at.</param>
            <param name="currentPosition">The current position the stream that was affected by the append operation is at.</param>
        </member>
        <member name="T:SqlStreamStore.Streams.Deleted">
            <summary>
                Represents information regarding deleted messages and streams.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.DeletedStreamId">
            <summary>
                The Id of the stream that delete messages are written to.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.StreamDeletedMessageType">
            <summary>
                The message type of a stream deleted message.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.MessageDeletedMessageType">
            <summary>
                The message type of a message deleted message.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.Deleted.CreateStreamDeletedMessage(System.String)">
            <summary>
                Createts <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/> that contains a stream deleted message.
            </summary>
            <param name="streamId">The stream id of the deleted stream.</param>
            <returns>A <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/>.</returns>
        </member>
        <member name="M:SqlStreamStore.Streams.Deleted.CreateMessageDeletedMessage(System.String,System.Guid)">
            <summary>
                Createts a <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/> that contains a message deleted message.
            </summary>
            <param name="streamId">The stream id of the deleted stream.</param>
            <param name="messageId">The message id of the deleted message.</param>
            <returns>A <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/>A <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/>.</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.Deleted.StreamDeleted">
            <summary>
                The message appended to $deleted when a stream is deleted.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.StreamDeleted.StreamId">
            <summary>
                The stream id the deleted of the deleted stream. 
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.Deleted.MessageDeleted">
            <summary>
                The message appended to $deleted with an individual message is deleted.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.MessageDeleted.StreamId">
            <summary>
                The stream id the deleted message belonged to. 
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Deleted.MessageDeleted.MessageId">
            <summary>
                The message id of the deleted message.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.ExpectedVersion">
            <summary>
                Stream expected version constants.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ExpectedVersion.Any">
            <summary>
                Any version.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ExpectedVersion.NoStream">
            <summary>
                Stream does not exist.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.MetadataMessage">
            <summary>
                Represents a streams metadata.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.MetadataMessage.StreamId">
            <summary>
            The Stream Id.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.MetadataMessage.MaxAge">
            <summary>
            The max age of messages retained in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.MetadataMessage.MaxCount">
            <summary>
            The max count of message retained in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.MetadataMessage.MetaJson">
            <summary>
            Custom Json 
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.NewStreamMessage">
            <summary>
                Represents a message to be appended to a stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.NewStreamMessage.JsonData">
            <summary>
                The message data serialized as JSON.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.NewStreamMessage.MessageId">
            <summary>
                The id of the messaage.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.NewStreamMessage.Type">
            <summary>
                The message type. Note: it is not recommended to use CLR type names
                (fully qualified or not).
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.NewStreamMessage.JsonMetadata">
            <summary>
                Metadata serialzied as JSON.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.NewStreamMessage.#ctor(System.Guid,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of <see cref="T:SqlStreamStore.Streams.NewStreamMessage"/>.
            </summary>
            <param name="messageId">The id of the messaage.</param>
            <param name="type">
                The message type. Note: it is not recommended to use CLR type names
                (fully qualified or not).
            </param>
            <param name="jsonData">The message data serialized as JSON.</param>
            <param name="jsonMetadata"> Metadata serialzied as JSON.</param>
        </member>
        <member name="T:SqlStreamStore.Streams.PageReadStatus">
            <summary>
                Represents the status of a page read.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.PageReadStatus.Success">
            <summary>
                The stream was successfully read.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.PageReadStatus.StreamNotFound">
            <summary>
                The stream was not found.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.Position">
            <summary>
                Constants for store position
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Position.Start">
            <summary>
                The start of the store.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.Position.End">
            <summary>
                The end of the store.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.ReadAllPage">
            <summary>
                Represents the result of a read of all streams.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadAllPage.FromPosition">
            <summary>
                A long representing the position where this page was read from.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadAllPage.NextPosition">
            <summary>
                A long representing the position where the next page should be read from.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadAllPage.IsEnd">
            <summary>
                True if page reach end of the all stream at time of reading. Otherwise false.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadAllPage.Direction">
            <summary>
                The direction of the the read request.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadAllPage.Messages">
            <summary>
                The collection of <see cref="T:SqlStreamStore.Streams.StreamMessage"/>s returned as part of the read.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.ReadAllPage.#ctor(System.Int64,System.Int64,System.Boolean,SqlStreamStore.Streams.ReadDirection,SqlStreamStore.Streams.ReadNextAllPage,SqlStreamStore.Streams.StreamMessage[])">
            <summary>
                Initializes a new instance of <see cref="T:SqlStreamStore.Streams.ReadAllPage"/>
            </summary>
            <param name="fromPosition">A long representing the position where this page was read from.</param>
            <param name="nextPosition">A long representing the position where the next page should be read from.</param>
            <param name="isEnd">True if page reach end of the all stream at time of reading. Otherwise false.</param>
            <param name="direction">The direction of the the read request.</param>
            <param name="readNext">An operation to read the next page of messages.</param>
            <param name="messages">The collection messages read.</param>
        </member>
        <member name="M:SqlStreamStore.Streams.ReadAllPage.ToString">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Streams.ReadAllPage.ReadNext(System.Threading.CancellationToken)">
            <summary>
                Reads the next page.
            </summary>
            <param name="cancellationToken">A token to cancel the operations.</param>
            <returns>A task the represents the asyncronous operation.</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.ReadDirection">
            <summary>
            Represents the direction of read operation.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadDirection.Forward">
            <summary>
                From the start to the end.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadDirection.Backward">
            <summary>
                From the end to the start.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.ReadNextAllPage">
            <summary>
                Represents an operation to read the next all page.
            </summary>
            <param name="nextPosition">The position to read from.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the result of the operation.z</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.ReadNextStreamPage">
            <summary>
                Represents an operaion to read the next stream page.
            </summary>
            <param name="nextVersion">The next version to read from.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task representing the result of the reading the next stream page.</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.ReadStreamPage">
            <summary>
                Represents the result of a read from a stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.Messages">
            <summary>
                The collection of messages read.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.FromStreamVersion">
            <summary>
                The version of the stream that read from.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.IsEnd">
            <summary>
                Whether or not this is the end of the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.LastStreamVersion">
            <summary>
                The version of the last message in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.LastStreamPosition">
            <summary>
                The position of the last message in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.NextStreamVersion">
            <summary>
                The next message version that can be read.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.ReadDirection">
            <summary>
                The direction of the read operation.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.Status">
            <summary>
                The <see cref="T:SqlStreamStore.Streams.PageReadStatus"/> of the read operation.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.ReadStreamPage.StreamId">
            <summary>
                The id of the stream that was read.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.ReadStreamPage.#ctor(System.String,SqlStreamStore.Streams.PageReadStatus,System.Int32,System.Int32,System.Int32,System.Int64,SqlStreamStore.Streams.ReadDirection,System.Boolean,SqlStreamStore.Streams.ReadNextStreamPage,SqlStreamStore.Streams.StreamMessage[])">
            <summary>
                Initialized a new instance of <see cref="T:SqlStreamStore.Streams.ReadStreamPage"/>/
            </summary>
            <param name="streamId">The id of the stream that was read.</param>
            <param name="status">The <see cref="T:SqlStreamStore.Streams.PageReadStatus"/> of the read operation.</param>
            <param name="fromStreamVersion">The version of the stream that read from.</param>
            <param name="nextStreamVersion">The next message version that can be read.</param>
            <param name="lastStreamVersion">The version of the last message in the stream.</param>
            <param name="lastStreamPosition">The position of the last message in the stream.</param>
            <param name="direction">The direction of the read operation.</param>
            <param name="isEnd">Whether or not this is the end of the stream.</param>
            <param name="readNext">An operation to read the next page.</param>
            <param name="messages">The messages read.</param>
        </member>
        <member name="T:SqlStreamStore.Streams.SetStreamMetadataResult">
            <summary>
                Represents the result of setting a stream's metadata.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.SetStreamMetadataResult.CurrentVersion">
            <summary>
                The current version of the stream at the time
                the metadata was written.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.SetStreamMetadataResult.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SqlStreamStore.Streams.SetStreamMetadataResult"/>.
            </summary>
            <param name="currentVersion"></param>
        </member>
        <member name="T:SqlStreamStore.Streams.StreamId">
            <summary>
                Represents a valid Stream Id. Is implicitly convertable to/from a string.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SqlStreamStore.Streams.StreamId"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:SqlStreamStore.Streams.StreamId.Value">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.op_Implicit(SqlStreamStore.Streams.StreamId)~System.String">
            <summary>
                Performs an implicit conversion from <see cref="T:SqlStreamStore.Streams.StreamId"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.op_Implicit(System.String)~SqlStreamStore.Streams.StreamId">
            <summary>
                Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:SqlStreamStore.Streams.StreamId"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.Equals(SqlStreamStore.Streams.StreamId)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Streams.StreamId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SqlStreamStore.Streams.StreamMessage">
            <summary>
                Represents t
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamMessage.GetJsonData(System.Threading.CancellationToken)">
            <summary>
                Gets the Json Data of the message. If prefetch is enabled, this will be a fast operation. 
            </summary>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>
                The Json Data of the message. If the message has been subsequently deleted since this 
                StreamMessage was created, then it will return null.
            </returns>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamMessageExtensions.GetJsonDataAs``1(SqlStreamStore.Streams.StreamMessage,System.Threading.CancellationToken)">
            <summary>
                Deserializes the json data using the bundled json serializer.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="streamMessage">The stream message that contains the json data.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamMessageExtensions.JsonMetadataAs``1(SqlStreamStore.Streams.StreamMessage)">
            <summary>
                Deserializes the json meta data using the bundled json serializer.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="streamMessage">The stream message that contains the json meta data.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:SqlStreamStore.Streams.StreamMetadataResult">
            <summary>
                Represents the result of a steam metadata read.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamMetadataResult.StreamId">
            <summary>
                The stream ID.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamMetadataResult.MetadataStreamVersion">
            <summary>
                The verson of the metadata stream. Can be used for concurrency control.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamMetadataResult.MaxAge">
            <summary>
                The max age of messages in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamMetadataResult.MaxCount">
            <summary>
                The max count of message in the stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamMetadataResult.MetadataJson">
            <summary>
                Custom metadata serialized as JSON.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.StreamMetadataResult.#ctor(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
                Initialized a new instance of <see cref="T:SqlStreamStore.Streams.StreamMetadataResult"/>.
            </summary>
            <param name="streamId">The stream ID.</param>
            <param name="metadataStreamVersion">The verson of the metadata stream.</param>
            <param name="maxAge">The max age of messages in the stream.</param>
            <param name="maxCount">The max count of message in the stream.</param>
            <param name="metadataJson">Custom metadata serialized as JSON.</param>
        </member>
        <member name="T:SqlStreamStore.Streams.StreamVersion">
            <summary>
            Constants for stream version
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamVersion.Start">
            <summary>
            The first message in a stream
            </summary>
        </member>
        <member name="F:SqlStreamStore.Streams.StreamVersion.End">
            <summary>
            The last message in the stream.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Streams.WrongExpectedVersionException">
            <summary>
                Represents an exception that is thrown when a version supplied
                as part of an append does not match the stream version
                (part of concurrency control).
            </summary>
        </member>
        <member name="M:SqlStreamStore.Streams.WrongExpectedVersionException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of <see cref="T:SqlStreamStore.Streams.WrongExpectedVersionException"/>.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.AllStreamMessageReceived">
            <summary>
                 Repesents a delegate that is invoked when a stream messages has been received in a subscription.
            </summary>
            <param name="subscription">
                 The source subscription.
            </param>
            <param name="streamMessage">
                The stream message.</param>
            <returns>A task that represents the asynchronous handling of the stream message.</returns>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.AllStreamSubscription">
            <summary>
                Represents a subscription to all streams.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Subscriptions.AllStreamSubscription.Name">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.AllStreamSubscription.FromPosition">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.AllStreamSubscription.LastPosition">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.AllStreamSubscription.Started">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.AllStreamSubscription.MaxCountPerRead">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Subscriptions.AllStreamSubscription.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SqlStreamStore.Subscriptions.AllSubscriptionDropped">
            <summary>
                A delegate that is invoked when a subscription has dropped.
            </summary>
            <param name="subscription">
                The source subscription.
            </param>
            <param name="reason">
                The subscription dropped reason.</param>
            <param name="exception">
                The underlying exception that caused the subscription to drop, if one exists.
            </param>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.CreateStreamStoreNotifier">
            <summary>
                Represents an operaion to create a stream store notifier.
            </summary>
            <param name="readonlyStreamStore"></param>
            <returns></returns>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.HasCaughtUp">
            <summary>
                A delegate that is invoked when a subscription has either caught up or fallen behind.
            </summary>
            <returns>
                True if the subscription has caught up, False otherwise.
            </returns>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.IStreamStoreNotifier">
            <summary>
                Represents an notifier lets subsribers know that the 
                stream store has new messages.
            </summary>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier">
            <summary>
                Represents an implementation of <see cref="T:SqlStreamStore.Subscriptions.IStreamStoreNotifier"/> that polls
                the target stream store for new message.
            </summary>
        </member>
        <member name="M:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier.#ctor(SqlStreamStore.IReadonlyStreamStore,System.Int32)">
            <summary>
                Initializes a new instance of of <see cref="T:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier"/>.
            </summary>
            <param name="readonlyStreamStore">The store to poll.</param>
            <param name="interval">The interval to poll in milliseconds. Default is 1000.</param>
        </member>
        <member name="M:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Int32)">
            <summary>
                Initializes a new instance of of <see cref="T:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier"/>.
            </summary>
            <param name="readHeadPosition">An operation to read the head position of a store.</param>
            <param name="interval">The interval to poll in milliseconds. Default is 1000.</param>
        </member>
        <member name="M:SqlStreamStore.Subscriptions.PollingStreamStoreNotifier.Subscribe(System.IObserver{SqlStreamStore.Infrastructure.Unit})">
            <inheritdoc />
        </member>
        <member name="T:SqlStreamStore.Subscriptions.StreamMessageReceived">
            <summary>
                  Repesents a delegate that is invoked when a stream messages has been received in a subscription.
            </summary>
            <param name="subscription">
                 The source subscription.
            </param>
            <param name="streamMessage">
                The stream message.
            </param>
            <param name="cancellationToken">
                The cancellation instruction.
            </param>
            <returns>A task that represents the asynchronous handling of the stream message.</returns>
        </member>
        <member name="T:SqlStreamStore.Subscriptions.StreamSubscription">
            <summary>
                Represents a subscription to a stream.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Subscriptions.StreamSubscription.DefaultPageSize">
            <summary>
                The default page size to read.
            </summary>
        </member>
        <member name="P:SqlStreamStore.Subscriptions.StreamSubscription.Name">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.StreamSubscription.StreamId">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.StreamSubscription.LastVersion">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.StreamSubscription.Started">
            <inheritdoc />
        </member>
        <member name="P:SqlStreamStore.Subscriptions.StreamSubscription.MaxCountPerRead">
            <inheritdoc />
        </member>
        <member name="M:SqlStreamStore.Subscriptions.StreamSubscription.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SqlStreamStore.Subscriptions.SubscriptionDropped">
            <summary>
                A delegate that is invoked when a subscription has dropped.
            </summary>
            <param name="subscription">
                The source subscription.
            </param>
            <param name="reason">
                The subscription dropped reason.
            </param>
            <param name="exception">
                The underlying exception that caused the subscription to drop, if one exists.
            </param>
        </member>
        <member name="F:SqlStreamStore.Subscriptions.SubscriptionDroppedReason.Disposed">
            <summary>
                The subscription was disposed deliberately. The associated exception will be null. You will not usually
                perform any actions as a result of this.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Subscriptions.SubscriptionDroppedReason.SubscriberError">
            <summary>
                The subscription encountered an error in the subscriber callback. It is your responsibility to check
                the exception to determine whether it is recoverable, and if so, recreate the subscription if
                desired.
            </summary>
        </member>
        <member name="F:SqlStreamStore.Subscriptions.SubscriptionDroppedReason.StreamStoreError">
            <summary>
                The subscription encountered an error from the underlying StreamStore. It is your responsibility to check
                the exception to determine whether it is recoverable, and if so, recreate the subscription if 
                desired.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumarable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:StreamStoreStore.Json.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:StreamStoreStore.Json.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:StreamStoreStore.Json.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:StreamStoreStore.Json.SimpleJson.SerializeObject(System.Object,StreamStoreStore.Json.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:StreamStoreStore.Json.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
